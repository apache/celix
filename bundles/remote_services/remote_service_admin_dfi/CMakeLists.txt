# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


celix_subproject(RSA_REMOTE_SERVICE_ADMIN_DFI "Option to enable building the Remote Service Admin Service DFI" ON DEPS TOPOLOGY_MANAGER)

if (RSA_REMOTE_SERVICE_ADMIN_DFI)

    find_package(CURL REQUIRED)
    find_package(Jansson REQUIRED)
    find_package(UUID REQUIRED)

    add_celix_bundle(rsa_dfi
            VERSION 0.9.0
            SYMBOLIC_NAME "apache_celix_remote_service_admin_dfi"
            NAME "Apache Celix Remote Service Admin Dynamic Function Interface (DFI)"
            GROUP "Celix/RSA"
            SOURCES
            src/remote_service_admin_dfi.c
            src/remote_service_admin_activator.c
            src/export_registration_dfi.c
            src/import_registration_dfi.c
            src/dfi_utils.c
            $<TARGET_OBJECTS:Celix::civetweb>
    )
    celix_bundle_private_libs(rsa_dfi Celix::dfi)
    target_include_directories(rsa_dfi PRIVATE $<TARGET_PROPERTY:Celix::civetweb,INCLUDE_DIRECTORIES>)
    #target_include_directories(rsa_dfi SYSTEM PRIVATE ${CURL_INCLUDE_DIRS} ${JANSSON_INCLUDE_DIRS} ${UUID_INCLUDE_DIRS})
    target_include_directories(rsa_dfi PRIVATE ${JANSSON_INCLUDE_DIRS} ${UUID_INCLUDE_DIRS})
    target_link_libraries(rsa_dfi PRIVATE
            Celix::dfi
            Celix::log_helper
            Celix::rsa_common
            ${CURL_LIBRARIES} ${JANSSON_LIBRARIES})

    if (ENABLE_TESTING)
        add_subdirectory(test)
    endif()


    install_celix_bundle(rsa_dfi EXPORT celix COMPONENT rsa)
    #Setup target aliases to match external usage
    add_library(Celix::rsa_dfi ALIAS rsa_dfi)
endif()
