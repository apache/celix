Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


@startuml

control send_request_thread
participant shared_memory
queue domain_socket
control handle_request_thread

send_request_thread->shared_memory ++:shmPool_malloc
return shared memory address
send_request_thread->shared_memory:copy request to shared memory
send_request_thread->domain_socket:sendto(rsa_shm_msg_t)
loop pthread_cond_timedwait,\nUntil the response is read completely
    send_request_thread->shared_memory:read response from shared memory
    note over shared_memory: If the response is complete,\n'msgState' will be set to 'REPLIED' or 'ABEND'\nby the 'handle_request_thread'
end

domain_socket->handle_request_thread:recvfrom(rsa_shm_msg_t)
handle_request_thread->shared_memory++:read request from shared memory
return
handle_request_thread->handle_request_thread:handleRequest
loop Until the response is written completely
    handle_request_thread->shared_memory :copy response to shared memory
    handle_request_thread->handle_request_thread:pthread_cond_signal
end

send_request_thread->shared_memory :shmPool_free
@enduml