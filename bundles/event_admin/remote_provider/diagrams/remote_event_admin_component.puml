@startuml
'https://plantuml.com/component-diagram


package "Framework1" {
  ()EventAdminService1 as "Event Admin Service"
  ()EventHandlerService1 as "Event handler Service"
  [User] -( EventAdminService1
  EventAdminService1 - [Event admin]
  [Event admin] -( EventHandlerService1
  EventHandlerService1 - [Event handler Proxy]
  [Event handler Proxy] -down-"Event Subscriber Service"
}

package "Framework2" {
   ()EventHandlerService2  as "Event handler Service"
   ()EventAdminService2 as "Event Admin Service"
   EventAdmin2 as [Event Admin]
   RemoteEventAdmin as [Remote Event Admin]
   RemoteEventAdmin -up- EventHandlerService2
   RemoteEventAdmin -( EventAdminService2
   EventAdmin2 -down- EventAdminService2
}

  [Event handler Proxy] -( EventHandlerService2
  RemoteEventAdmin -( "Event Subscriber Service"

@enduml

@startuml
'利用RSA实现EventAdmin的远程调用
interface celix_event_remote_provider_service {
  +celix_status_t postEvent(const char* topic, celix_properties_t* properties)
  +celix_status_t sendEvent(const char* topic, celix_properties_t* properties)
}

'interface celix_remote_event_admin_service {
'  +celix_status_t postEvent(const char* topic, celix_properties_t* properties)
'  +celix_status_t sendEvent(const char* topic, celix_properties_t* properties)
'  +celix_status_t subscribeFor(const char* fwUuid, const celix_array_list_t* topics, const char* filter)
'  +celix_status_t unsubscribeFor(const char* fwUuid, const celix_array_list_t* topics)
'}

interface celix_event_remote_subscriber_service_t {
    void* handle
    celix_status_t (*receiveEventAsync)(void* handle, const char* topic, const celix_properties_t* properties)
    celix_status_t (*receiveEventSync)(void* handle, const char* topic, const celix_properties_t* properties)
}

interface celix_event_handler_remote_listener_service_t {
    void *handle
    celix_status_t (*handlerAdded)(void* handle, const char* handlerFwUUID, long handlerSvcId, const char* topics, const char* filter)
    celix_status_t (*handlerRemoved)(void* handle, const char* handlerFwUUID, long handlerSvcId, const char* topics, const char* filter)
}

class celix_event_remote_provider {
}

celix_event_remote_provider -up-> celix_event_remote_provider_service
celix_event_remote_provider -down-> celix_event_remote_subscriber_service_t
celix_event_remote_provider -down-> celix_event_handler_remote_listener_service_t

'note top of celix_event_remote_provider_service
'  其为本地服务，服务属性包括:endpoint.fwuuid list, rank(也许要通过外部配置)
'  该服务无法作为远程接口直接提供给其他框架的event admin,
'  因为需要在事件传递到远端之前进行过滤，避免浪费不必要的流量，
'  故需要由本地的provider根据远程的celix_event_remote_admin_service/端点进行过滤
'end note
'
'note top of celix_event_remote_admin_service
'  基于RSA的celix_event_remote_provider私有接口
'end note

@enduml

@startuml
'基于RSA的EventAdmin组建关系图

package "Framework1" {
actor "User" as User1
interface EventAdminService1 as "Event Admin Service"
component EventAdmin1 as "Event Admin"
interface EventRemoteProviderService1 as "celix_event_remote_provider_service_t"
interface EventHandlerRemoteListenerService as "celix_event_handler_remote_listener_service_t"
component EventRemoteProvider1 as "Event Remote Provider"

User1 ..> EventAdminService1: publish event
EventAdminService1 -- EventAdmin1
EventAdmin1 ..> EventRemoteProviderService1
EventRemoteProviderService1 -- EventRemoteProvider1
EventRemoteProvider1 -- EventHandlerRemoteListenerService
}

package "Framework2" {
interface EventAdminService2 as "Event Admin Service"
component EventAdmin2 as "Event Admin"
interface EventRemoteSubService as "celix_event_remote_subscriber_service_t"
component EventRemoteProvider2 as "Event Remote Provider"
interface EventHandlerService as "Event Handler Service"
component EventHandler as "Event Handlers"
EventHandler -- EventHandlerService
EventAdmin2 .up.> EventHandlerService
EventAdmin2 -- EventAdminService2
EventRemoteProvider2 .up.> EventAdminService2
EventRemoteProvider2 -- EventRemoteSubService
}
EventRemoteProvider1 ..> EventRemoteSubService:forward event
EventRemoteProvider2 ..> EventHandlerRemoteListenerService:forward subscription
@enduml

@startuml
'基于MQTT实现EventAdmin的远程调用
interface celix_event_remote_provider_service {
  +celix_status_t postEvent(const char* topic, celix_properties_t* properties)
  +celix_status_t sendEvent(const char* topic, celix_properties_t* properties)
}

interface celix_mqtt_broker_info_service {
    void *handle;
}

class celix_event_remote_provider {
}

celix_event_remote_provider -up-> celix_event_remote_provider_service
celix_event_remote_provider -up-> celix_mqtt_broker_info_service

@enduml





@startuml
'基于MQTT的EventAdmin组建关系图
rectangle HOST1 {
  rectangle mosquitto.conf
  node MQTTBroker as "MQTT Broker"
  package Framework1 {
    actor User
    component EventAdmin1 as "Event Admin"
    interface EventAdminService1 as "Event Admin Service"
    interface EventRemoteProviderService1 as "Event Remote \nProvider Service"
    interface MQTTBrokerInfoService as "MQTT Broker\n Info Service"
    component EventRemoteProvider1 as "Event Remote Provider"
  }
}

rectangle HOST2 {
  package Framework2 {
    component EventHandler as "Event Handlers"
    interface EventHandlerService as "Event Handler Service"
    component EventAdmin2 as "Event Admin"
    interface EventAdminService2 as "Event Admin Service"
    component EventRemoteProvider2 as "Event Remote Provider"
  }
}

User ..>EventAdminService1: publish event
EventAdminService1 -- EventAdmin1
EventAdmin1 ..> EventRemoteProviderService1
EventRemoteProviderService1 -- EventRemoteProvider1
EventRemoteProvider1 -up- MQTTBrokerInfoService
EventRemoteProvider1 <.right.> MQTTBroker:Publish and subscribe event
EventRemoteProvider1 ..> mosquitto.conf:Read broker address
MQTTBroker ..> mosquitto.conf:read

EventHandler -- EventHandlerService
EventAdmin2 .up.> EventHandlerService
EventAdmin2 -down- EventAdminService2
EventRemoteProvider2 .up.> EventAdminService2:publish event

EventRemoteProvider2 .right.> MQTTBrokerInfoService:Get broker address
EventRemoteProvider2 <.right.> MQTTBroker:Publish and subscribe event

@enduml













