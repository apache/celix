name: Celix

on: [push, pull_request]

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest]
        #os: [ubuntu-18.04, ubuntu-16.04, macOS-10.14]
        compiler: [clang]
        include:
          - os: ubuntu-18.04
            compiler: clang
          - os: ubuntu-18.04
            name: sanitizer
            compiler: gcc
            sanitize: true
          - os: ubuntu-18.04
            name: only v3 api
            compiler: gcc
            v3_api: true
    timeout-minutes: 120
    steps:
    - name: Checkout source code
      uses: actions/checkout@master
    - name: Install dependencies
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu"* ]]; then
          sudo apt-get update
          sudo apt-get install -yq --no-install-recommends \
            build-essential \
            curl \
            uuid-dev \
            libjansson-dev \
            libcurl4-openssl-dev \
            default-jdk \
            cmake \
            libffi-dev \
            libxml2-dev \
            libczmq-dev \
            libcpputest-dev
        fi
        if [[ "${{ matrix.os }}" == "macOS"* ]]; then
          brew update
          brew install lcov libffi zeromq czmq openssl cpputest
          brew link --force libffi
          brew unlink openssl && brew link openssl --force
        fi
        cd $GITHUB_WORKSPACE
    - name: Build
      env:
        CC: ${{ matrix.compiler }}
        BUILD_OPTIONS: |
          -DENABLE_TESTING=ON
        BUILD_OPTIONS_LINUX:
        BUILD_OPTIONS_OSX: |
          -DFFI_INCLUDE_DIR=/usr/local/opt/libffi/lib/libffi-3.2.1/include
          -DFFI_LIBRARY=/usr/local/opt/libffi/lib/libffi.dylib
        BUILD_OPTIONS_SANITIZE: |
          -DENABLE_ADDRESS_SANITIZER=ON
        BUILD_OPTIONS_V3_API: |
          -DCELIX_USE_ZIP_INSTEAD_OF_JAR=ON
          -DCELIX_INSTALL_DEPRECATED_API=OFF
      run: |
        mkdir build install
        cd build
        if [[ "${{ matrix.sanitize }}" == "true" ]]; then
          export BUILD_OPTIONS="${BUILD_OPTIONS} ${BUILD_OPTIONS_SANITIZE}"
        fi
        if [[ "${{ matrix.v3_api }}" == "true" ]]; then
          export BUILD_OPTIONS="${BUILD_OPTIONS} ${BUILD_OPTIONS_V3_API}"
        fi
        if [[ "${{ matrix.os }}" == "ubuntu"* ]]; then
          cmake -DCMAKE_BUILD_TYPE=Debug ${BUILD_OPTIONS} ${BUILD_OPTIONS_LINUX} \
              -DCMAKE_INSTALL_PREFIX=../install ..
        fi
        if [[ "${{ matrix.os }}" == "macOS"* ]]; then
          cmake -DCMAKE_BUILD_TYPE=Debug ${BUILD_OPTIONS} ${BUILD_OPTIONS_OSX} \
              -DCMAKE_INSTALL_PREFIX=../install ..
        fi
        make -j && make install
    - name: Test
      run: |
        cd $GITHUB_WORKSPACE/build
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH:$(pwd)/utils:$(pwd)/framework:$(pwd)/dfi
        make test ARGS="-V"

